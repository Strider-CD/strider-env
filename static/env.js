define(
  ['require', 'apres', 'jquery', 'bootstrap', 'underscore'],
  function(require, apres, $, bootstrap, _) {
    var EnvWidget = function(elem, params) {
      var elem = $(elem);
      var table = elem.find(".table");
      var tmpl = $("#env-table-row");
      var loading = $("#env-loading");
      var header = $("#env-header");
      var none = $("#env-none");
      var compiled_template = _.template(tmpl.html());
      var loading_template = _.template(loading.html())
      var header_template = _.template(header.html())
      var none_template = _.template(none.html())
      var id_key_map;
      var results;

      console.log("init");
      function message(message, classes) {
        elem.find("div.alert").removeClass().addClass("alert " + classes).html(message).show();
      }

      function message_hide() {
        elem.find("div.alert").hide();
      }

      // Render the table
      function render(results) {
        console.log("render");
        // Reset contents of table
        table.html("");
        if (Object.keys(results).length == 0) {
          table.append(none_template());
        } else {
          table.append(header_template());
          // Reset id -> item map
          id_key_map = {};
          console.log("results")
          _.each(results, function(value, key) {
            console.log("value: %s key: %s", value, key);
            var uuid = _.uniqueId("env");
            id_key_map[uuid] = key;
            var el = compiled_template({key:key, value:value, uuid: uuid});
            table.append(el);
          });
        }
      }

      // Fetch & render the list of env variables
      function load(url) {
        var el = loading_template();
        table.html(el);
        $.ajax({
          url: "/api/env",
          type: "GET",
          data: {url: url},
          dataType: "json",
          success: function (data, ts, xhr) {
            results = data.results;
            render(results);
          },
          error: function(xhr, ts, e) {
            if (xhr && xhr.responseText) {
                var data = $.parseJSON(xhr.responseText);
                message("Error adding environment variable: " + data.errors[0], "alert-error");
            } else {
                message("Error adding environment variable: " + e, "alert-error");
            }
          }

        });
      }

      // Save the environment
      function save(url, env) {
        var data = {url: url, env:JSON.stringify(env)};
        $.ajax({
          url: "/api/env",
          type: "POST",
          data: data,
          dataType: "json",
          success: function(data, ts, xhr) {
            message("Environment variables saved.", "alert-success");
            load(repo_url);
          },
          error: function(xhr, ts, e) {
            if (xhr && xhr.responseText) {
                var data = $.parseJSON(xhr.responseText);
                message("Error saving environment variables: " + data.errors[0], "alert-error");
            } else {
                message("Error saving environment variables: " + e, "alert-error");
            }
          }
        });
      }

      // Handy bindings
      this.events = {
        'click .btn-add-env': function() {
          console.log("click");
          // Add
          var key = elem.find(".env-key").val();
          var value = elem.find(".env-val").val();
          // Simple validation
          if (key.length > 0 && value.length > 0) {
            results[key] = value;
            save(repo_url, results);
          } else {
            message("Invalid environment variable", "alert-error");
          }
        },
        'click .icon-remove': function(ev) {
          var k = id_key_map[$(ev.target).attr('id')];
          delete results[k];
          save(repo_url, results);
        }
      };

      // There is a global "repo" object which is generated by the server
      var repo_url = apres.controller().params.repo_url;
      load(repo_url);

    };

    return EnvWidget;
  }
);
